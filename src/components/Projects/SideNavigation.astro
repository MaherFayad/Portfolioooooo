---
const sections = [
  { id: 'project-overview', title: 'Project Overview' },
  { id: 'research-methods', title: 'Research Methods' },
  { id: 'user-interviews', title: 'User Interviews' },
  { id: 'user-persona', title: 'User Persona' },
  { id: 'user-journey-map', title: 'User Journey Map' },
  { id: 'overall-analytics', title: 'Overall Analytics' },
  { id: 'conclusion', title: 'Conclusion' },
];
---

<nav class="sticky top-24 h-[calc(100vh-6rem)] overflow-y-auto">
  <ul class="space-y-2">
    {sections.map((section) => (
      <li>
        <a
          href={`#${section.id}`}
          class="nav-link block py-2 px-4 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded transition-colors duration-200 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-800"
          data-section={section.id}
        >
          {section.title}
        </a>
      </li>
    ))}
  </ul>
</nav>

<script>
  const navLinks = document.querySelectorAll('.nav-link');
  const sections = document.querySelectorAll('section');

  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.5,
  };

  const observerCallback = (entries: any[]) => {
    entries.forEach((entry: { isIntersecting: any; target: { id: any; }; }) => {
      if (entry.isIntersecting) {
        const activeId = entry.target.id;
        navLinks.forEach((link) => {
          if (link.getAttribute('data-section') === activeId) {
            link.classList.add('text-blue-600', 'dark:text-blue-400', 'font-medium');
          } else {
            link.classList.remove('text-blue-600', 'dark:text-blue-400', 'font-medium');
          }
        });
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  sections.forEach((section) => {
    observer.observe(section);
  });
</script>